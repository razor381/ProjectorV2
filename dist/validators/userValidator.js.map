{"version":3,"sources":["../../src/validators/userValidator.js"],"names":["schema","Joi","object","name","string","label","alphanum","min","max","email","photo","password","password_confirm","ref","role","valid","with","validateUser","req","res","next","body","then","catch","err","findUser","params","id"],"mappings":";;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;AACA,MAAMA,MAAM,GAAGC,aAAIC,MAAJ,CAAW;AACxBC,EAAAA,IAAI,EAAEF,aACHG,MADG,GAEHC,KAFG,CAEG,MAFH,EAGHC,QAHG,GAIHC,GAJG,CAIC,CAJD,EAKHC,GALG,CAKC,EALD,CADkB;AAQxBC,EAAAA,KAAK,EAAER,aACJG,MADI,GAEJC,KAFI,CAEE,OAFF,EAGJI,KAHI,EARiB;AAaxBC,EAAAA,KAAK,EAAET,aACJG,MADI,GAEJC,KAFI,CAEE,OAFF,CAbiB;AAiBxBM,EAAAA,QAAQ,EAAEV,aAAIG,MAAJ,EAjBc;AAmBxBQ,EAAAA,gBAAgB,EAAEX,aAAIY,GAAJ,CAAQ,UAAR,CAnBM;AAqBxBC,EAAAA,IAAI,EAAEb,aACHG,MADG,GAEHW,KAFG,CAEG,MAFH,EAEW,OAFX,EAEoB,QAFpB;AArBkB,CAAX,EAyBZC,IAzBY,CAyBP,UAzBO,EAyBK,kBAzBL,CAAf;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAC3C,SAAO,uBAASF,GAAG,CAACG,IAAb,EAAmBrB,MAAnB,EACJsB,IADI,CACC,MAAMF,IAAI,EADX,EAEJG,KAFI,CAEGC,GAAD,IAASJ,IAAI,CAACI,GAAD,CAFf,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,QAAT,CAAkBP,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACvC,SAAO,2BAAQF,GAAG,CAACQ,MAAJ,CAAWC,EAAnB,EACJL,IADI,CACC,MAAMF,IAAI,EADX,EAEJG,KAFI,CAEGC,GAAD,IAASJ,IAAI,CAACI,GAAD,CAFf,CAAP;AAGD","sourcesContent":["import Joi from 'joi';\n\nimport validate from '../utils/validate';\nimport { getUser } from '../services/userServices';\n\n// user request body validation schema\nconst schema = Joi.object({\n  name: Joi\n    .string()\n    .label('Name')\n    .alphanum()\n    .min(4)\n    .max(30),\n\n  email: Joi\n    .string()\n    .label('Email')\n    .email(),\n\n  photo: Joi\n    .string()\n    .label('Photo'),\n\n  password: Joi.string(),\n\n  password_confirm: Joi.ref('password'),\n\n  role: Joi\n    .string()\n    .valid('user', 'admin', 'mentor'),\n})\n  .with('password', 'password_confirm');\n\n/**\n * Validate create/update user request.\n *\n * @param {Object} req\n * @param {Object} res\n * @param {Function} next\n */\nexport function validateUser(req, res, next) {\n  return validate(req.body, schema)\n    .then(() => next())\n    .catch((err) => next(err));\n}\n\n/**\n * Validate user existence.\n *\n * @param {Object} req\n * @param {Object} res\n * @param {Function} next\n */\nexport function findUser(req, res, next) {\n  return getUser(req.params.id)\n    .then(() => next())\n    .catch((err) => next(err));\n}\n"],"file":"userValidator.js"}