{"version":3,"sources":["../../src/utils/errorHandler.js"],"names":["notFound","req","res","status","HttpStatus","NOT_FOUND","json","error","code","message","getStatusText","methodNotAllowed","METHOD_NOT_ALLOWED","bodyParser","err","next","console","log","genericErrorHandler","stack"],"mappings":";;;;;;;;;;AAAA;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACjCA,EAAAA,GAAG,CAACC,MAAJ,CAAWC,yBAAWC,SAAtB,EAAiCC,IAAjC,CAAsC;AACpCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEJ,yBAAWC,SADZ;AAELI,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWC,SAApC;AAFJ;AAD6B,GAAtC;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,gBAAT,CAA0BV,GAA1B,EAA+BC,GAA/B,EAAoC;AACzCA,EAAAA,GAAG,CAACC,MAAJ,CAAWC,yBAAWQ,kBAAtB,EAA0CN,IAA1C,CAA+C;AAC7CC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEJ,yBAAWQ,kBADZ;AAELH,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWQ,kBAApC;AAFJ;AADsC,GAA/C;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,UAAT,CAAoBC,GAApB,EAAyBb,GAAzB,EAA8BC,GAA9B,EAAoCa,IAApC,EAA0C;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACL,OAAhB;AAEAP,EAAAA,GAAG,CAACC,MAAJ,CAAWW,GAAG,CAACX,MAAf,EAAuBG,IAAvB,CAA4B;AAC1BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEM,GAAG,CAACX,MADL;AAELM,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBI,GAAG,CAACX,MAA7B;AAFJ;AADmB,GAA5B;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASe,mBAAT,CAA6BJ,GAA7B,EAAkCb,GAAlC,EAAuCC,GAAvC,EAA4Ca,IAA5C,EAAkD;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACK,KAAhB;AACA,QAAMZ,KAAK,GAAG,yBAAWO,GAAX,CAAd;AAEAZ,EAAAA,GAAG,CAACC,MAAJ,CAAWI,KAAK,CAACC,IAAjB,EAAuBF,IAAvB,CAA4B;AAAEC,IAAAA;AAAF,GAA5B;AACD","sourcesContent":["import HttpStatus from 'http-status-codes';\n\nimport buildError from './buildError';\n\n/**\n * Error middleware for 404 not found.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function notFound(req, res) {\n  res.status(HttpStatus.NOT_FOUND).json({\n    error: {\n      code: HttpStatus.NOT_FOUND,\n      message: HttpStatus.getStatusText(HttpStatus.NOT_FOUND),\n    }\n  });\n}\n\n/**\n * Error middleware for method not allowed.\n * Must be placed at the very bottom of middleware stack.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function methodNotAllowed(req, res) {\n  res.status(HttpStatus.METHOD_NOT_ALLOWED).json({\n    error: {\n      code: HttpStatus.METHOD_NOT_ALLOWED,\n      message: HttpStatus.getStatusText(HttpStatus.METHOD_NOT_ALLOWED),\n    },\n  });\n}\n\n/**\n * Handle invalid JSON in request body.\n *\n * @param {Object} err\n * @param {Object} req\n * @param {Object} res\n * @param {Function} next\n */\nexport function bodyParser(err, req ,res , next) {\n  console.log(err.message);\n\n  res.status(err.status).json({\n    error: {\n      code: err.status,\n      message: HttpStatus.getStatusText(err.status),\n    },\n  });\n}\n\n/**\n * Generic error response middleware.\n * For validation errors, http errors and internal server errors.\n *\n * @param {Object} err\n * @param {Object} req\n * @param {Object} res\n * @param {Function} next\n */\nexport function genericErrorHandler(err, req, res, next) {\n  console.log(err.stack);\n  const error = buildError(err);\n\n  res.status(error.code).json({ error });\n}\n"],"file":"errorHandler.js"}